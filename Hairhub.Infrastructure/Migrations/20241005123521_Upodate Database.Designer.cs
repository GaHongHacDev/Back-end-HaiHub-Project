// <auto-generated />
using System;
using Hairhub.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hairhub.Infrastructure.Migrations
{
    [DbContext(typeof(HaiHubDbContext))]
    [Migration("20241005123521_Upodate Database")]
    partial class UpodateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hairhub.Domain.Entitities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<Guid>("RoleId")
                        .HasMaxLength(64)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("full_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("img");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("admin", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("cancel_date");

                    b.Property<decimal?>("CommissionRate")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("commission_rate");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("discounted_price");

                    b.Property<bool?>("IsReportByCustomer")
                        .HasColumnType("bit")
                        .HasColumnName("is_report_by_customer");

                    b.Property<bool?>("IsReportBySalon")
                        .HasColumnType("bit")
                        .HasColumnName("is_report_by_salon");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("original_price");

                    b.Property<string>("QrCodeImg")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("qr_code_img");

                    b.Property<string>("ReasonCancel")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reason_cancel");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_price");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("appointment", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.AppointmentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("appointment_id");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionServiceHair")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description_service_hair");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<string>("ImgServiceHair")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("img_service_hair");

                    b.Property<decimal?>("PriceServiceHair")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price_service_hair");

                    b.Property<Guid>("SalonEmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("salon_employee_id");

                    b.Property<Guid>("ServiceHairId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("service_hair_id");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("service_name");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("status");

                    b.Property<decimal?>("TimeServiceHair")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("time_service_hair");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("SalonEmployeeId");

                    b.HasIndex("ServiceHairId");

                    b.ToTable("appointment_detail", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.AppointmentDetailVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("appointment_id");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("voucher_id");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("VoucherId");

                    b.ToTable("appointment_detail_voucher", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Approval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("admin_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<string>("ReasonReject")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("reason_reject");

                    b.Property<Guid>("SalonInformationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("salon_id");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("SalonInformationId");

                    b.ToTable("approval", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.BusyScheduleEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("busy_schedule_employee", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Config", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal?>("CommissionRate")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("commission_rate");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_create");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("NumberOfDay")
                        .HasColumnType("int")
                        .HasColumnName("number_of_day");

                    b.Property<decimal?>("PakageFee")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("pakage_fee");

                    b.Property<string>("PakageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("pakage_name");

                    b.HasKey("Id");

                    b.ToTable("config", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("DayOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("day_of_birth");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("img");

                    b.Property<int?>("NumberOfReported")
                        .HasColumnType("int")
                        .HasColumnName("number_of_report");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("appointment_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("rating");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.FeedbackDetail", b =>
                {
                    b.Property<Guid>("AppointmentDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeedbackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating_detail");

                    b.HasKey("AppointmentDetailId");

                    b.HasIndex("FeedbackId");

                    b.ToTable("feedback_detail", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.ImageStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid>("StyleHairCustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("style_hair_customer_id");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url_image");

                    b.HasKey("Id");

                    b.HasIndex("StyleHairCustomerId");

                    b.ToTable("image_style", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.OTP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_time");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<double?>("ExpireTime")
                        .HasColumnType("float")
                        .HasColumnName("expire_time");

                    b.Property<string>("OtpKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("otp_key");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("TypeOtp")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type_otp");

                    b.HasKey("Id");

                    b.ToTable("otp", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal?>("CommissionRate")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("commission_rate");

                    b.Property<Guid?>("ConfigId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("config_id");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("MethodBanking")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("method_banking");

                    b.Property<decimal?>("PakageFee")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("pakage_fee");

                    b.Property<string>("PakageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("pakage_name");

                    b.Property<int>("PaymentCode")
                        .HasColumnType("int")
                        .HasColumnName("payment_code");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("payment_date");

                    b.Property<Guid>("SalonOWnerID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("salon_owner_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("total_amount");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.HasIndex("SalonOWnerID");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.RefreshTokenAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(515)
                        .HasColumnType("nvarchar(515)")
                        .HasColumnName("access_token");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2")
                        .HasColumnName("expires");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("refresh_token");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("refresh_token_account", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<string>("DescriptionAdmin")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description_admin");

                    b.Property<string>("ReasonReport")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("reason_report");

                    b.Property<string>("RoleNameReport")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role_name_report");

                    b.Property<Guid?>("SalonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("salon_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TimeConfirm")
                        .HasColumnType("datetime2")
                        .HasColumnName("time_confirm");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalonId");

                    b.ToTable("report", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("RoleName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.SalonEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("img");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Phone")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("phone");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("rating");

                    b.Property<int?>("RatingCount")
                        .HasColumnType("int")
                        .HasColumnName("rating_count");

                    b.Property<int?>("RatingSum")
                        .HasColumnType("int")
                        .HasColumnName("rating_sum");

                    b.Property<Guid>("SalonInformationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("salon_information_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SalonInformationId");

                    b.ToTable("salon_employee", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.SalonInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("approved_at");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("description");

                    b.Property<string>("Img")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("img");

                    b.Property<decimal>("Latitude")
                        .HasMaxLength(150)
                        .HasColumnType("decimal(18,10)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasMaxLength(150)
                        .HasColumnType("decimal(18,10)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("NumberOfReported")
                        .HasColumnType("int")
                        .HasColumnName("number_of_reported");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("owner_id");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(18,1)")
                        .HasColumnName("rate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalRating")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_rating");

                    b.Property<int>("TotalReviewer")
                        .HasColumnType("int")
                        .HasColumnName("total_reviewer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("salon_information", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.SalonOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("DayOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("day_of_birth");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Img")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("img");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("salon_owner", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("day_of_week");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_id");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("SalonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("salon_id");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SalonId");

                    b.ToTable("schedule", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.ServiceEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("SalonEmployeeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("salon_employee_id");

                    b.Property<Guid>("ServiceHairId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("service_hair_id");

                    b.HasKey("Id");

                    b.HasIndex("SalonEmployeeId");

                    b.HasIndex("ServiceHairId");

                    b.ToTable("service_employee", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.ServiceHair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("description");

                    b.Property<string>("Img")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("img");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<Guid>("SalonInformationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("salon_information_id");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("service_name");

                    b.Property<decimal>("Time")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.HasIndex("SalonInformationId");

                    b.ToTable("service_hair", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.StaticFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("FeedbackId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("feed_back_id");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("img");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("report_id");

                    b.Property<Guid?>("SalonInformationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("salon_information_id");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("video");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("ReportId");

                    b.HasIndex("SalonInformationId");

                    b.ToTable("static_file", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.StyleHairCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateddAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("style_hair_customer", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("discount_percentage");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiry_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSystemCreated")
                        .HasColumnType("bit")
                        .HasColumnName("is_system_created");

                    b.Property<decimal>("MaximumDiscount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("maximum_discount");

                    b.Property<decimal?>("MaximumOrderAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("maximum_order_amount");

                    b.Property<decimal?>("MinimumOrderAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("minimum_order_amount");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_date");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("SalonInformationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("salon_information_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.HasIndex("SalonInformationId");

                    b.ToTable("voucher", (string)null);
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Account", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_role_acount");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Admin", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Account", "Account")
                        .WithMany("Admins")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_admin_account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Appointment", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_customer_appointment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.AppointmentDetail", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Appointment", "Appointment")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("FK_appointment_detail_appointment");

                    b.HasOne("Hairhub.Domain.Entitities.SalonEmployee", "SalonEmployee")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("SalonEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_appointment_detail_salon_employee");

                    b.HasOne("Hairhub.Domain.Entitities.ServiceHair", "ServiceHair")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("ServiceHairId")
                        .IsRequired()
                        .HasConstraintName("FK_appointment_detail_service_hair");

                    b.Navigation("Appointment");

                    b.Navigation("SalonEmployee");

                    b.Navigation("ServiceHair");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.AppointmentDetailVoucher", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Appointment", "Appointment")
                        .WithMany("AppointmentDetailVouchers")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("FK_appointment_detail_appointment_detail_voucher");

                    b.HasOne("Hairhub.Domain.Entitities.Voucher", "Voucher")
                        .WithMany("AppointmentDetailVouchers")
                        .HasForeignKey("VoucherId")
                        .IsRequired()
                        .HasConstraintName("FK_voucher_appointment_detail_voucher");

                    b.Navigation("Appointment");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Approval", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Admin", "Admin")
                        .WithMany("Approvals")
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK_approval_admin");

                    b.HasOne("Hairhub.Domain.Entitities.SalonInformation", "SalonInformation")
                        .WithMany("Approvals")
                        .HasForeignKey("SalonInformationId")
                        .IsRequired()
                        .HasConstraintName("FK_approval_salon_information");

                    b.Navigation("Admin");

                    b.Navigation("SalonInformation");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.BusyScheduleEmployee", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.SalonEmployee", "SalonEmployee")
                        .WithMany("BusyScheduleEmployees")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_busy_schedule_employee_salon_employee");

                    b.Navigation("SalonEmployee");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Customer", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Account", "Account")
                        .WithMany("Customers")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_account_customer");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Feedback", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Appointment", "Appointment")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("FK_appointment_feedback");

                    b.HasOne("Hairhub.Domain.Entitities.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_customer_feedback");

                    b.Navigation("Appointment");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.FeedbackDetail", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.AppointmentDetail", "AppointmentDetail")
                        .WithOne("FeedbackDetail")
                        .HasForeignKey("Hairhub.Domain.Entitities.FeedbackDetail", "AppointmentDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_appointment_feedback_detail");

                    b.HasOne("Hairhub.Domain.Entitities.Feedback", "Feedback")
                        .WithMany("FeedbackDetails")
                        .HasForeignKey("FeedbackId")
                        .IsRequired()
                        .HasConstraintName("FK_feedback_feedback_detail");

                    b.Navigation("AppointmentDetail");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.ImageStyle", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.StyleHairCustomer", "StyleHairCustomer")
                        .WithMany("ImageStyles")
                        .HasForeignKey("StyleHairCustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_image_style_style_hair_customer");

                    b.Navigation("StyleHairCustomer");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Payment", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Config", "Config")
                        .WithMany("Payments")
                        .HasForeignKey("ConfigId")
                        .HasConstraintName("FK_config_payment");

                    b.HasOne("Hairhub.Domain.Entitities.SalonOwner", "SalonOwner")
                        .WithMany("Payments")
                        .HasForeignKey("SalonOWnerID")
                        .IsRequired()
                        .HasConstraintName("FK_salon_owner_payment");

                    b.Navigation("Config");

                    b.Navigation("SalonOwner");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.RefreshTokenAccount", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Account", "Account")
                        .WithMany("RefreshTokenAccounts")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_account_refresh_token_account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Report", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Appointment", "Appointment")
                        .WithMany("Report")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("FK_appointment_report");

                    b.HasOne("Hairhub.Domain.Entitities.Customer", "Customer")
                        .WithMany("Report")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_customer_report");

                    b.HasOne("Hairhub.Domain.Entitities.SalonInformation", "SalonInformation")
                        .WithMany("Report")
                        .HasForeignKey("SalonId")
                        .HasConstraintName("FK_salon_report");

                    b.Navigation("Appointment");

                    b.Navigation("Customer");

                    b.Navigation("SalonInformation");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.SalonEmployee", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Account", "Account")
                        .WithMany("SalonEmployees")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_account_salon_employee");

                    b.HasOne("Hairhub.Domain.Entitities.SalonInformation", "SalonInformation")
                        .WithMany("SalonEmployees")
                        .HasForeignKey("SalonInformationId")
                        .IsRequired()
                        .HasConstraintName("FK_salon_information_salon_employee");

                    b.Navigation("Account");

                    b.Navigation("SalonInformation");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.SalonInformation", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.SalonOwner", "SalonOwner")
                        .WithMany("SalonInformations")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_owner_salon_information");

                    b.Navigation("SalonOwner");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.SalonOwner", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Account", "Account")
                        .WithMany("SalonOwners")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_account_salon_owner");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Schedule", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.SalonEmployee", "SalonEmployee")
                        .WithMany("Schedules")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_employee_schedule");

                    b.HasOne("Hairhub.Domain.Entitities.SalonInformation", "SalonInformation")
                        .WithMany("Schedules")
                        .HasForeignKey("SalonId")
                        .HasConstraintName("FK_salon_information_schedule");

                    b.Navigation("SalonEmployee");

                    b.Navigation("SalonInformation");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.ServiceEmployee", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.SalonEmployee", "SalonEmployee")
                        .WithMany("ServiceEmployees")
                        .HasForeignKey("SalonEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_salon_employee_service_employee");

                    b.HasOne("Hairhub.Domain.Entitities.ServiceHair", "ServiceHair")
                        .WithMany("ServiceEmployees")
                        .HasForeignKey("ServiceHairId")
                        .IsRequired()
                        .HasConstraintName("FK_service_hair_service_employee");

                    b.Navigation("SalonEmployee");

                    b.Navigation("ServiceHair");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.ServiceHair", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.SalonInformation", "SalonInformation")
                        .WithMany("ServiceHairs")
                        .HasForeignKey("SalonInformationId")
                        .IsRequired()
                        .HasConstraintName("FK_salon_infor_service_hair");

                    b.Navigation("SalonInformation");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.StaticFile", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Feedback", "Feedback")
                        .WithMany("StaticFiles")
                        .HasForeignKey("FeedbackId")
                        .HasConstraintName("FK_feedback_static_file");

                    b.HasOne("Hairhub.Domain.Entitities.Report", "Report")
                        .WithMany("StaticFiles")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("FK_report_static_file");

                    b.HasOne("Hairhub.Domain.Entitities.SalonInformation", "SalonInformation")
                        .WithMany("StaticFiles")
                        .HasForeignKey("SalonInformationId")
                        .HasConstraintName("FK_saloninformation_static_file");

                    b.Navigation("Feedback");

                    b.Navigation("Report");

                    b.Navigation("SalonInformation");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.StyleHairCustomer", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.Customer", "Customer")
                        .WithMany("StyleHairCustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_customer_style_hair_customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Voucher", b =>
                {
                    b.HasOne("Hairhub.Domain.Entitities.SalonInformation", "SalonInformation")
                        .WithMany("Vouchers")
                        .HasForeignKey("SalonInformationId");

                    b.Navigation("SalonInformation");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Account", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Customers");

                    b.Navigation("RefreshTokenAccounts");

                    b.Navigation("SalonEmployees");

                    b.Navigation("SalonOwners");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Admin", b =>
                {
                    b.Navigation("Approvals");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Appointment", b =>
                {
                    b.Navigation("AppointmentDetailVouchers");

                    b.Navigation("AppointmentDetails");

                    b.Navigation("Feedbacks");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.AppointmentDetail", b =>
                {
                    b.Navigation("FeedbackDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Config", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Report");

                    b.Navigation("StyleHairCustomers");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Feedback", b =>
                {
                    b.Navigation("FeedbackDetails");

                    b.Navigation("StaticFiles");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Report", b =>
                {
                    b.Navigation("StaticFiles");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.SalonEmployee", b =>
                {
                    b.Navigation("AppointmentDetails");

                    b.Navigation("BusyScheduleEmployees");

                    b.Navigation("Schedules");

                    b.Navigation("ServiceEmployees");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.SalonInformation", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Report");

                    b.Navigation("SalonEmployees");

                    b.Navigation("Schedules");

                    b.Navigation("ServiceHairs");

                    b.Navigation("StaticFiles");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.SalonOwner", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("SalonInformations");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.ServiceHair", b =>
                {
                    b.Navigation("AppointmentDetails");

                    b.Navigation("ServiceEmployees");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.StyleHairCustomer", b =>
                {
                    b.Navigation("ImageStyles");
                });

            modelBuilder.Entity("Hairhub.Domain.Entitities.Voucher", b =>
                {
                    b.Navigation("AppointmentDetailVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
